runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
shiny::runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
shiny::runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
?pandoc.table
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
kable
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
library("KableExtra")
library("kableExtra")
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
runApp('C:/Users/woong/OneDrive/MyDev/FERT_ADVISORY')
shiny::runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='bcgov-env',
token='28028675C0F542EAFFBC2DA7735F3697',
secret='<SECRET>')
rsconnect::setAccountInfo(name='bcgov-env',
token='28028675C0F542EAFFBC2DA7735F3697',
secret='F5G0BzNKRkpbDwakjKRnHSRvvCjWa4fBedM1cChP')
library(rsconnect)
shiny::runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
deployApp()
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
deployApp()
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
warnings()
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
summaF<-function(x) c(M=mean(x,na.rm=T), SE=sd(x,na.rm=T)/sqrt(length(x[!is.na(x)])), N=length(x[!is.na(x)]))
cnt<-function(x) length(x[!is.na(x)])
trees <- read.csv ( paste(file.path(dirname(getwd()), "trees.csv") ), header = TRUE  )
summaF<-function(x) c(M=mean(x,na.rm=T), SE=sd(x,na.rm=T)/sqrt(length(x[!is.na(x)])), N=length(x[!is.na(x)]))
cnt<-function(x) length(x[!is.na(x)])
trees <- read.csv ( paste(file.path(dirname(getwd()), "trees.csv") ), header = TRUE  )
knitr::include_graphics("map.png")
knitr::include_graphics("timeline.png")
agt1 <- aggregate(Plots$Mort*100, by=list(Fert =  Plots$Fert, EP = Plots$phase), FUN = summaF )
agt1 <- aggregate(Plots$Mort*100, by=list(Fert =  Plots$Fert, EP = Plots$phase), FUN = summaF )
agt1 <- aggregate(Plots$Mort*100, by=list(Fert =  Plots$Fert, EP = Plots$phase), FUN = summaF )
summaF<-function(x) c(M=mean(x,na.rm=T), SE=sd(x,na.rm=T)/sqrt(length(x[!is.na(x)])), N=length(x[!is.na(x)]))
cnt<-function(x) length(x[!is.na(x)])
Plots <- read.csv("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/1318/plots.csv", header=TRUE, sep=",")
trees <- read.csv("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/1318/trees.csv", header=TRUE, sep=",")
trees[trees$phase=="south",]$Age <- trees[trees$phase=="south",]$Age -1
knitr::include_graphics("map.png")
knitr::include_graphics("timeline.png")
agt1 <- aggregate(Plots$Mort*100, by=list(Fert =  Plots$Fert, EP = Plots$phase), FUN = summaF )
ord <- c(1,2,3,4,7,8,5,6)
den = rep(c(0, 50), 4)
par(mar=c(3.5,3.5,1.2,1), mgp=c(1.9, 0.6, 0))
plot(1, type="n", main="",
ylab=paste("Cumulative Mortality (%)"),
xlab="", ylim=c(0, 40), xlim=c(0.5, 8+0.5), xaxt="n", bty="l")
for(i in 1:8)
{
## mean bars
rect(xleft=i - 0.3, ybottom=0, xright=i + 0.3, ytop=agt1[ord[i], 3][1], density=den[i])
## standard errors
arrows(x0=i, y0=agt1[ord[i], 3][1],
y1=agt1[ord[i], 3][1] + agt1[ord[i], 3][2],
angle=90, length=0.06, code=2) }
abline(v=2.5, lty=2); abline(v=4.5, lty=2) ; abline(v=6.5, lty=2)
box()
text(1, 38, "Big SCHIRP\nLow"); text(3.3, 38, "Big SCHIRP\nMed");text(5.3, 40, "Transitional");text(7.3, 38, "Kennedy\n Lake")
legend(2.8,-1,c("Unfertilized", "Fertilized"), bty = "n", xpd=TRUE, density = c(0, 50), horiz = TRUE)
state <- map_data("state")
rm(list = ls())
# read plot locations
library(readxl)
plots <- data.frame(read_excel("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/SMC_data/UBC.200805.xlsx",
sheet = "plots"))
plots$inst <- paste (plots$Project, plots$Installation, sep = '-')
plots <- plots[,c("inst","Latitude", "Longitude")]
# remove duplicates
library(dplyr)
plots <- plots[!duplicated(plots$inst), ]
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
# read world map
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-126.0, -116.8), ylim = c(44.2, 49.8), expand = FALSE) +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-126.0, -116.8), ylim = c(44.2, 49.8)) +
geom_point(data = plots,
aes(x = Longitude, y = Latitude))
library("ggspatial")
ggplot(data = world) +
geom_sf() +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-126.0, -116.8), ylim = c(44.2, 49.8)) +
geom_point(data = plots,
aes(x = Longitude, y = Latitude))
library(maps)
library(mapdata)
states <- map_data("state")
west <- subset(states, region %in% c( "oregon", "washington"))
ggplot(data = west) +
geom_polygon(aes(x = long, y = lat, group = group), fill="grey", color = "black") +
coord_fixed(1.3) +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
geom_point(data = plots,
aes(x = Longitude, y = Latitude))
library(ggsn)
library(ggmap)
sbbox <- make_bbox(lon = plots$Longitude, lat = plots$Latitude, f = .1)
sbbox
sq_map <- get_map(location = sbbox, maptype = "terrain", source = "google")
ggmap(sq_map) + geom_point(data = plots, mapping = aes(x = Longitude, y = Latitude), color = "red")
state <- map_data("state")
WA_OR <- subset(state, region%in%c("washington", "oregon"))
counties <- map_data("county")
WA_OR_county <- subset(counties, region%in%c("washington", "oregon"))
ca_map <- ggplot(data=WA_OR, mapping=aes(x=long, y=lat, group=group)) +
coord_fixed(1.3) +
geom_polygon(color="black", fill="gray") +
geom_polygon(data=WA_OR_county, fill=NA, color="white") +
geom_polygon(color="black", fill=NA) +
ggtitle('') +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
geom_point(data = plots, aes(x=Longitude, y=Latitude), colour="red", inherit.aes = FALSE) +
# annotation_scale(data = WA_OR, location = "br", width_hint = 0.5) +
scalebar(data=WA_OR, location = "br", dist = 100, st.size = 0.8,
dist_unit = "km", transform = TRUE,  model = "WGS84") +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering)
ca_map
ggplot(data = west) +
geom_polygon(aes(x = long, y = lat, group = group), fill="grey", color = "black") +
coord_fixed(1.3) +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
geom_point(data = plots,
aes(x = Longitude, y = Latitude))
ggplot(data = west) +
geom_polygon(aes(x = long, y = lat, group = group), fill="grey", color = "black") +
coord_fixed(1.3) +
#annotation_scale(location = "br", width_hint = 0.5) +
#annotation_north_arrow(location = "br", which_north = "true",
#                       pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
#                       style = north_arrow_fancy_orienteering) +
geom_point(data = plots,
aes(x = Longitude, y = Latitude))
install.packages("robustbase")
View(plots)
View(plots)
library(betareg)
Mort_model <- betareg(Mort1 ~  Density + Fert * phase, data = Plots)
library(betareg)
Mort_model <- betareg(Mort1 ~  Density + Fert * phase, data = Plots)
library(betareg)
Mort_model <- betareg(Mort1 ~  Density + Fert * phase, data = Plots)
summaF<-function(x) c(M=mean(x,na.rm=T), SE=sd(x,na.rm=T)/sqrt(length(x[!is.na(x)])), N=length(x[!is.na(x)]))
cnt<-function(x) length(x[!is.na(x)])
Plots <- read.csv("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/1318/plots.csv", header=TRUE, sep=",")
trees <- read.csv("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/1318/trees.csv", header=TRUE, sep=",")
trees[trees$phase=="south",]$Age <- trees[trees$phase=="south",]$Age -1
knitr::include_graphics("map.png")
knitr::include_graphics("timeline.png")
agt1 <- aggregate(Plots$Mort*100, by=list(Fert =  Plots$Fert, EP = Plots$phase), FUN = summaF )
ord <- c(1,2,3,4,7,8,5,6)
den = rep(c(0, 50), 4)
par(mar=c(3.5,3.5,1.2,1), mgp=c(1.9, 0.6, 0))
plot(1, type="n", main="",
ylab=paste("Cumulative Mortality (%)"),
xlab="", ylim=c(0, 40), xlim=c(0.5, 8+0.5), xaxt="n", bty="l")
for(i in 1:8)
{
## mean bars
rect(xleft=i - 0.3, ybottom=0, xright=i + 0.3, ytop=agt1[ord[i], 3][1], density=den[i])
## standard errors
arrows(x0=i, y0=agt1[ord[i], 3][1],
y1=agt1[ord[i], 3][1] + agt1[ord[i], 3][2],
angle=90, length=0.06, code=2) }
abline(v=2.5, lty=2); abline(v=4.5, lty=2) ; abline(v=6.5, lty=2)
box()
text(1, 38, "SCHIRP\nLow"); text(3.3, 38, "SCHIRP\nMed");text(5.3, 40, "Transitional");text(7.3, 38, "Kennedy\n Lake")
legend(2.8,-1,c("Unfertilized", "Fertilized"), bty = "n", xpd=TRUE, density = c(0, 50), horiz = TRUE)
library(betareg)
Mort_model <- betareg(Mort1 ~  Density + Fert * phase, data = Plots)
#summary(Mort_model)
library(betareg)
Mort_model <- betareg(Mort1 ~  Density * Fert * phase, data = Plots)
#summary(Mort_model)
summary(Mort_model)
library(betareg)
Mort_model <- betareg(Mort1 ~  Density * Fert + Fert * phase, data = Plots)
#summary(Mort_model)
summary(Mort_model)
library(betareg)
Mort_model <- betareg(Mort1 ~  Density + Fert * phase, data = Plots)
#summary(Mort_model)
summaF<-function(x) c(M=mean(x,na.rm=T), SE=sd(x,na.rm=T)/sqrt(length(x[!is.na(x)])), N=length(x[!is.na(x)]))
cnt<-function(x) length(x[!is.na(x)])
Plots <- read.csv("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/1318/plots.csv", header=TRUE, sep=",")
trees <- read.csv("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/1318/trees.csv", header=TRUE, sep=",")
trees[trees$phase=="south",]$Age <- trees[trees$phase=="south",]$Age -1
knitr::include_graphics("map.png")
knitr::include_graphics("timeline.png")
library(betareg)
Mort_model <- betareg(Mort1 ~  Density + Fert * phase, data = Plots)
#summary(Mort_model)
agt1
summaF<-function(x) c(M=mean(x,na.rm=T), SE=sd(x,na.rm=T)/sqrt(length(x[!is.na(x)])), N=length(x[!is.na(x)]))
cnt<-function(x) length(x[!is.na(x)])
Plots <- read.csv("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/1318/plots.csv", header=TRUE, sep=",")
trees <- read.csv("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/1318/trees.csv", header=TRUE, sep=",")
trees[trees$phase=="south",]$Age <- trees[trees$phase=="south",]$Age -1
knitr::include_graphics("map.png")
knitr::include_graphics("timeline.png")
agt1
agt1 <- aggregate(Plots$Mort*100, by=list(Fert =  Plots$Fert, EP = Plots$phase), FUN = summaF )
ord <- c(1,2,3,4,7,8,5,6)
den = rep(c(0, 50), 4)
par(mar=c(3.5,3.5,1.2,1), mgp=c(1.9, 0.6, 0))
plot(1, type="n", main="",
ylab=paste("Cumulative Mortality (%)"),
xlab="", ylim=c(0, 40), xlim=c(0.5, 8+0.5), xaxt="n", bty="l")
for(i in 1:8)
{
## mean bars
rect(xleft=i - 0.3, ybottom=0, xright=i + 0.3, ytop=agt1[ord[i], 3][1], density=den[i])
## standard errors
arrows(x0=i, y0=agt1[ord[i], 3][1],
y1=agt1[ord[i], 3][1] + agt1[ord[i], 3][2],
angle=90, length=0.06, code=2) }
abline(v=2.5, lty=2); abline(v=4.5, lty=2) ; abline(v=6.5, lty=2)
box()
text(1, 38, "SCHIRP\nLow"); text(3.3, 38, "SCHIRP\nMed");text(5.3, 40, "Transitional");text(7.3, 38, "Kennedy\n Lake")
legend(2.8,-1,c("Unfertilized", "Fertilized"), bty = "n", xpd=TRUE, density = c(0, 50), horiz = TRUE)
agt1
aggregate(Plots$Mort*100, by=list(EP = Plots$phase), FUN = summaF )
28.2312925/5.3385417
install.packages("plotrix")
rm(list = ls())
# read plot locations
library(readxl)
plots <- data.frame(read_excel("C:/Users/woong/OneDrive/Work/UBC Projects/SCHIRP_NSERC_ENGAGE/Rawdata/CWH_Fert_Meta_Analysis_Raw_Data/SMC_data/UBC.200805.xlsx",
sheet = "plots"))
plots$inst <- paste (plots$Project, plots$Installation, sep = '-')
plots <- plots[,c("inst","Latitude", "Longitude")]
# remove duplicates
library(dplyr)
plots <- plots[!duplicated(plots$inst), ]
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
# read world map
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-126.0, -116.8), ylim = c(44.2, 49.8), expand = FALSE) +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-126.0, -116.8), ylim = c(44.2, 49.8)) +
geom_point(data = plots,
aes(x = Longitude, y = Latitude))
library("ggspatial")
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-126.0, -116.8), ylim = c(44.2, 49.8), expand = FALSE) +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-126.0, -116.8), ylim = c(44.2, 49.8)) +
geom_point(data = plots,
aes(x = Longitude, y = Latitude))
ggplot(data = world) +
geom_sf() +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
coord_sf(xlim = c(-126.0, -116.8), ylim = c(44.2, 49.8)) +
geom_point(data = plots,
aes(x = Longitude, y = Latitude))
library(maps)
library(mapdata)
states <- map_data("state")
west <- subset(states, region %in% c( "oregon", "washington"))
ggplot(data = west) +
geom_polygon(aes(x = long, y = lat, group = group), fill="grey", color = "black") +
coord_fixed(1.3) +
annotation_scale(location = "br", width_hint = 0.5) +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
geom_point(data = plots,
aes(x = Longitude, y = Latitude))
library(ggsn)
library(ggmap)
sbbox <- make_bbox(lon = plots$Longitude, lat = plots$Latitude, f = .1)
sbbox
sq_map <- get_map(location = sbbox, maptype = "terrain", source = "google")
ggmap(sq_map) + geom_point(data = plots, mapping = aes(x = Longitude, y = Latitude), color = "red")
state <- map_data("state")
WA_OR <- subset(state, region%in%c("washington", "oregon"))
counties <- map_data("county")
WA_OR_county <- subset(counties, region%in%c("washington", "oregon"))
ca_map <- ggplot(data=WA_OR, mapping=aes(x=long, y=lat, group=group)) +
coord_fixed(1.3) +
geom_polygon(color="black", fill="gray") +
geom_polygon(data=WA_OR_county, fill=NA, color="white") +
geom_polygon(color="black", fill=NA) +
ggtitle('') +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
geom_point(data = plots, aes(x=Longitude, y=Latitude), colour="red", inherit.aes = FALSE) +
# annotation_scale(data = WA_OR, location = "br", width_hint = 0.5) +
scalebar(data=WA_OR, location = "br", dist = 100, st.size = 0.8,
dist_unit = "km", transform = TRUE,  model = "WGS84") +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering)
ca_map
state <- map_data("state")
WA_OR <- subset(state, region%in%c("washington", "oregon"))
counties <- map_data("county")
WA_OR_county <- subset(counties, region%in%c("washington", "oregon"))
ca_map <- ggplot(data=WA_OR, mapping=aes(x=long, y=lat, group=group)) +
coord_fixed(1.3) +
geom_polygon(color="black", fill="gray") +
geom_polygon(data=WA_OR_county, fill=NA, color="white") +
geom_polygon(color="black", fill=NA) +
ggtitle('') +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
geom_point(data = plots, aes(x=Longitude, y=Latitude), colour="red", inherit.aes = FALSE) +
# annotation_scale(data = WA_OR, location = "br", width_hint = 0.5) +
scalebar(data=WA_OR, location = "br", dist = 100, st.size = 0.8,
dist_unit = "km", transform = TRUE,  model = "WGS84") +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering)
ca_map
ca_map <- ggplot(data=WA_OR, mapping=aes(x=long, y=lat, group=group)) +
coord_fixed(1.3) +
geom_polygon(color="black", fill="gray") +
geom_polygon(data=WA_OR_county, fill=NA, color="white") +
geom_polygon(color="black", fill=NA) +
ggtitle('') +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
geom_point(data = plots, aes(x=Longitude, y=Latitude), colour="red", inherit.aes = FALSE) +
# annotation_scale(data = WA_OR, location = "br", width_hint = 0.5) +
scalebar(data=WA_OR, location = "br", dist = 100, st.size = 0.8,
dist_unit = "km", transform = TRUE,  model = "WGS84") +
annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering)
ca_map
shiny::runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
shiny::runApp('C:/Users/woong/Desktop/TreeGrowth')
runApp()
runApp('C:/Users/woong/Desktop/TreeGrowth')
install.packages("shiny")
install.packages("lmfor")
install.packages("vegan3d")
pkg = c('magrittr', 'quantmod', 'rvest', 'httr', 'jsonlite',
'readr', 'readxl', 'stringr', 'lubridate', 'dplyr',
'tidyr', 'ggplot2', 'corrplot', 'dygraphs',
'highcharter', 'plotly', 'PerformanceAnalytics',
'nloptr', 'quadprog', 'RiskPortfolios', 'cccp',
'timetk', 'broom', 'stargazer', 'timeSeries')
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) {
install.packages(new.pkg, dependencies = TRUE)}
install.packages(c("cli", "colorspace", "corrplot", "curl", "digest", "emmeans", "fansi", "gargle", "ggplot2", "googledrive", "hardhat", "isoband", "ks", "Matrix", "mgcv", "mime", "modeldata", "multicool", "openssl", "parallelly", "plotly", "R6", "Rcpp", "sf", "slider", "spatstat", "spatstat.geom", "spatstat.linnet", "stringi", "sys", "testthat", "tinytest", "wk"))
shiny::runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
install.packages("leaflet")
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
install.packages("bslib")
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
install.packages("ggmap")
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
runApp('C:/Users/woong/OneDrive/MyDev/FNDFAS')
shiny::runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
install.packages("devtools")
devtools::install_github("mwritchie/standview")
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
dmd.volume
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
?numericInput
?textInput()
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
shiny::runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
runApp('C:/Users/woong/OneDrive/MyDev/SDMD_PP')
