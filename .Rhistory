install.packages("sjPlot")
install.packages("plotly")
install.packages("RColorBrewer")
install.packages("metR")
install.packages("isoband")
library(shiny); runApp('C:/Users/wjang/OneDrive - Government of BC/04_Outreach/2024/Double_check_EP703/shiny_table.R')
install.packages("SSDM")
install.packages("emmeans")
library(emmeans)
pigs.lm <- lm(log(conc) ~ source + factor(percent), data = pigs)
lsmeans(pigs.lm, "source")
summary(pigs.lm)
lsmeans(pigs.lm, "percent")
lsmeans(pigs.lm, "factor(percent)")
lsmeans(pigs.lm, factor("percent"))
pigs.lm <- lm(conc ~ source + factor(percent), data = pigs)
lsmeans(pigs.lm, factor("percent"))
install.packages("minpack.lm")
install.packages(aomisc)
install.packages("aomisc")
.libPaths()
library(ggcorplot)
library(ggcorrplot)
install.packages(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
install.packages("RODBC")
install.packages("betareg")
install.packages("WeibullFit")
install.packages("nls2")
library(shiny); runApp('C:/Users/wjang/OneDrive - Government of BC/09_Working_Groups/SMC/Shiny_PCT_demo/shiny_PCT_demo.R')
runApp('C:/Users/wjang/OneDrive - Government of BC/09_Working_Groups/SMC/Shiny_PCT_demo/shiny_PCT_demo.R')
runApp('C:/Users/wjang/OneDrive - Government of BC/09_Working_Groups/SMC/Shiny_PCT_demo/shiny_PCT_demo.R')
runApp('C:/Users/wjang/OneDrive - Government of BC/09_Working_Groups/SMC/Shiny_PCT_demo/shiny_PCT_demo.R')
library(shiny); runApp('C:/Users/wjang/OneDrive - Government of BC/09_Working_Groups/SMC/Shiny_PCT_demo/shiny_PCT_demo.R')
install.packages("MODIStsp")
install.packages("remotes")
library(remotes)
install_github("ropensci/MODIStsp")
library(MODIStsp)
MODIStsp(
gui             = FALSE,
out_folder      = "$tempdir",
selprod         = "Vegetation_Indexes_Monthly_005dg (M*D13C2)",
bandsel         = "NDVI",
sensor          = 'Terra',
user            = "hywoo" ,
password        = "Annabibi84!",
start_date      = "2019.01.01",
end_date        = "2019.12.31",
verbose         = TRUE,
bbox            = c(-1556264, 1082855, -756264.2, 2462855), #bbox of Latam
spatmeth        = 'bbox',
out_format      = 'GTiff',
compress        = 'LZW',
out_projsel     = 'User Defined',
output_proj     = '+proj=aea +lat_0=40 +lon_0=-96 +lat_1=50 +lat_2=70 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs',
delete_hdf      = TRUE,
parallel        = TRUE
)
.libPaths()
install.packages(c("dplyr", "ggplot2"))
update.packages(checkBuilt = TRUE)
.libPaths()
Sys. getenv("HOME")
Sys.getenv("HOME")
usethis::edit_r_environ()
installed.packages("usethis")
installed.packages("usethis")
install.packages("usethis")
usethis::edit_r_environ()
install.packages("languageserver")
install.packages("nlme", "lme4", "multcomp")
install.packages("nlme", "lme4", "multcomp", "vegan", "rpart", "devtools")
.libPaths()
.libPaths()
install.packages("nlme")
install.packages("lme4")
install.packages("multcomp")
install.packages("devtools")
install.packages("RODBC")
install.packages("odbc")
install.packages("readxl")
install.packages("foreign")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("ggvis")
install.packages("mgcv")
install.packages("randomForest")
install.packages("vcd")
install.packages("glmnet")
install.packages("survival")
install.packages("caret")
install.packages("rmarkdown")
install.packages("xtable")
install.packages("maps")
install.packages("sp")
install.packages("ggmap")
install.packages("data.table")
install.packages("parallel")
install.packages("jsonlite")
install.packages("httr")
install.packages("e1071")
install.packages("quantreg")
install.packages("reshape2")
install.packages("shiny.semantic")
install.packages("spatstat")
install.packages("xgboost")
install.packages("boot")
install.packages("lattice")
install.packages("MASS")
install.packages("spatial")
install.packages("betareg")
install.packages("PowerTOST")
library("PowerTOST")
pvals <- pvalues.TOST(pe=seq(1.02, 1.18, by=0.02), theta1=0.90, theta2=1.10, CV=0.5, n=2*(100-1), logscale=FALSE, design="paired means", both=FALSE, robust=FALSE)
pvals
#ME p-values
1-pvals
alpha <- 0.05
conf <- 1-alpha/2
nobs <- 100
sigma <- 0.5
stderr <- sigma/sqrt(nobs)
lower <- 0.90; #lower rope
upper <- 1.10; #upper rope
tcrit <- qt(conf,nobs-1)
rhat <- seq(1.02, 1.18, by=0.02)
deltal <- (rhat-lower)/stderr; #lower effect size
deltau <- (rhat-upper)/stderr; #upper effect size
power.below <- pt(-tcrit,nobs-1,deltal)
power.above <- 1-pt(tcrit,nobs-1,deltau)
power.me <- power.above+power.below
beta.me <- 1- power.me
#EQ power. Note alpha=0.05 pertains to the overall alpha, even though documentation is not entirely clear
power.TOST(theta0=seq(1.02, 1.18, by=0.02), theta1=0.90, theta2=1.10, CV=0.5, n=2*(100-1), alpha=0.05, logscale=FALSE, design ="paired means", method="exact", robust=FALSE)
install.packages("akima")
install.packages("lattice")
install.packages("rnaturalearth")
library("rnaturalearth")
sessionInfo()
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
dmd.view(3)
dmd.view(1)
dmd.view(1, max.sdi = 400)
dmd.view(1, max.sdi = 700)
dmd.view(1, max.sdi = 5000)
dmd.view(1, max.sdi = 500)
dmd.view(1, max.sdi = 450)
dmd.view(1, max.sdi = 550)
dmd.view(1, max.sdi = 650)
dmd.view(1, max.sdi = 700)
dmd.view(1, max.sdi = 800)
dmd.view(1, max.sdi = 500)
dmd.view(1, max.sdi = 200)
dmd.view(6, max.sdi = 200)
dmd.view(6, max.sdi = 500)
dmd.view(1, max.sdi = 500)
runApp('~/OneDrive/MyDev/SDMD_W')
stop()
if(NA)
print("hello")
print("hello")
?stop
stop(domain = "hello woarkd")
geterrmessage()
stop ("o ho")
geterrmessage()
TRUE | FALSE
TRUE || FALSE
FALSE || FALSE
FALSE || TRUE
TRUE & TRUE
TRUE & FALSE
TRUE && FALSE
FALSE && FALSE
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
dmd.view(3)
dmd.view(1)
dmd.view(2)
dmd.view(4)
dmd.view(5)
dmd.view(7)
dmd.view(6)
dmd.view(3)
runApp('~/OneDrive/MyDev/SDMD_W')
dmd.view(3)
dmd.view(1)
dmd.view(2)
dmd.view(3)
dmd.view(3)
dmd.view(3)
dmd.view(2)
dmd.view(1)
dmd.view(7)
dmd.view(8)
dmd.view(9)
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
dmd.view(1)
dmd.view(1, max.sdi = 550)
dmd.view(6, max.sdi = 550)
dmd.view(10, max.sdi = 550)
dmd.view(11, max.sdi = 550)
dmd.view(12, max.sdi = 550)
dmd.view(13, max.sdi = 550)
dmd.view(13, max.sdi = 750)
dmd.view(14, max.sdi = 750)
dmd.view(13, max.sdi = 550)
dmd.view(14, max.sdi = 550)
dmd.view(15, max.sdi = 550)
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
View(dmd.view)
dmd.view(1)
dmd.view(1, max.sdi = 550)
dmd.view(1, max.sdi = 450)
dmd.view(1, max.sdi = 450, sdi.lines = c(100,200,300,470))
dmd.view(1, max.sdi = 450, sdi.lines = c(100,200,300,400))
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
?anyNA
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
dmd.view(1, max.sdi = 500)
dmd.view(1, max.sdi = 500, sdi.lines = c(100, 200, 300))
dmd.view(1, max.sdi = 500, sdi.lines = c(100, 200, 300, 400, 500))
dmd.view(1, max.sdi = 500, sdi.lines = c(100, 200, 300, 400))
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
dmd.view(3, reineke.term = 1.6)
dmd.view(3, reineke.term = 2)
dmd.view(3, reineke.term = 3)
dmd.view(3, reineke.term = 1.8)
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD')
runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
max_sdi_txt <- function(ineq, use.metric){
if(!use.metric){
return(switch(ineq,
"Enter maximum SDI within a range of 300-800 TPA",   #1
"",                                                  #2
"",                                                  #3
"",                                                  #4
"",                                                  #5
"Enter maximum SDI within a range of 450-600 TPA",   #6
"",                                                  #7
"",                                                  #8
"",                                                  #9
"Enter maximum SDI within a range of 527-564 TPA",   #10
"Enter maximum SDI within a range of 547-608 TPA",   #11
"Enter maximum SDI within a range of 502-669 TPA",   #12
"Enter maximum SDI within a range of 750-1000 TPA",  #13
"Enter maximum SDI within a range of 550-700 TPA",   #14
"",                                                  #15
"")                                                  #16
)} else {
return(switch(ineq,
"Enter maximum SDI within a range of 750-2000 TPH",  #1
"",                                                  #2
"",                                                  #3
"",                                                  #4
"",                                                  #5
"Enter maximum SDI within a range of 1112-1483 TPH", #6
"",                                                  #7
"",                                                  #8
"",                                                  #9
"Enter maximum SDI within a range of 1302-1394 TPH", #10
"Enter maximum SDI within a range of 1352-1502 TPH", #11
"Enter maximum SDI within a range of 1240-1653 TPH", #12
"Enter maximum SDI within a range of 1875-2500 TPH", #13
"Enter maximum SDI within a range of 1360-1750 TPH", #14
"",                                                  #15
""                                                   #16
))
}
}
max_sdi_txt(3, FALSE)
max_sdi_txt(1, FALSE)
max_sdi_txt(1, T)
runApp('~/OneDrive/MyDev/SDMD_W')
max_sdi_txt(3, FALSE)
max_sdi_txt("3", FALSE)
max_sdi_txt(3, FALSE)
max_sdi_txt(1, FALSE)
max_sdi_txt("1", FALSE)
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
max_sdi_txt(6, F)
max_sdi_txt(6, T)
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
dmd.view(1, max.sdi = 500, sdi.lines = c(100, 200, 300, 400))
dmd.view(1, max.sdi = 500, sdi.lines = c(75, 200, 300, 400))
dmd.view(1, max.sdi = 500, sdi.lines = c(75, 200, 300, 400), dmd.title = "FALSES")
dmd.view(1, max.sdi = 500, sdi.lines = c(75, 200, 300, 400), dmd.title = "FALSE")
dmd.view(1, max.sdi = 500, sdi.lines = c(75, 200, 300, 400), invol = TRUE)
dmd.view(1, max.sdi = 500, sdi.lines = c(75, 200, 300, 400), insdl = TRUE)
dmd.view(1, max.sdi = 500, sdi.lines = c(75, 200, 300, 400))
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
library(kableExtra)
runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
report.log
report.log()
tinytex::tlmgr_update()
library(tinytex)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
tinytex:: install_tinytex()
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
?Sys.time()
Sys.time()
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%b %d %X %Y")
format(Sys.time(), "%b %d, %X %Y")
format(Sys.time(), "%b %d, %X, %Y")
format(Sys.time(), "%b %d,%X, %Y")
format(Sys.time(), "%b %d, %X, %Y")
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
library(knitr)
Note_option <- ifelse(input$comments =="", FALSE, TRUE)
library(knitr)
Note_option <- ifelse(input$comments =="", FALSE, TRUE)
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
asis_output('## My header\\n') # Header that is only shown if Note_option == TRUE
asis_output(input$comments) # Other stuff that is only executed if Note_option == TRUE
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
library(modelsummary)
install.packages("modelsummary")
mod <- lm(y ~ x, dat)
library(yarrr)
df = data.frame(x=c(1, 3, 3, 4, 5, 5, 6, 8, 9, 12),
y=c(12, 14, 14, 13, 17, 19, 22, 26, 24, 22))
mod <- lm(y ~ x, df)
library(modelsummary)
modelsummary(mod, output = "markdown")
modelsummary(mod, output = "table.docx")
install.packages("pandoc")
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
install.packages(
c("modelsummary", "tinytable", "insight", "performance", "parameters"),
repos = c(
"https://vincentarelbundock.r-universe.dev",
"https://easystats.r-universe.dev"))
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
?kbl
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
install.packages("magrittr")
install.packages("magrittr")
install.packages("flextable")
library(magrittr)
library(flextable)
devtools::install_github("davidgohel/flextable")
library(magrittr)
library(flextable)
tab_1_curr <- structure(list(myRegion = c("a", "b", "c", "BRITISH COLUMBIA"
), Current_Perc_1 = c(85.9, 90.8, 89.7, 88.4), Current_Perc_2 = c(88,
91, 89, 89.3), curr_change_1_to_2 = c(2.09999999999999, 0.200000000000003,
-0.700000000000003, 0.9)), .Names = c("myRegion", "Current_Perc_1",
"Current_Perc_2", "curr_change_1_to_2"), row.names = c(NA, 4L
), class = "data.frame")
flextable(tab_1_curr) %>%
bold(i = ~ myRegion %in% "BRITISH COLUMBIA") %>%
theme_zebra() %>%
autofit()
flextable
install.packages("flextable")
library(flextable)
flextable(mtcars) %>%
theme_vanilla() %>%
save_as_docx(path = "mytable.docx")
library(flextable)
install.packages("flextable", type = "binary")
library(flextable)
install.packages("gfonts")
library(flextable)
install.packages("flextable")
library(flextable)
install.packages(xfun)
install.packages("xfun")
library(flextable)
shiny::runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
?word_document()
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
runApp('~/OneDrive/MyDev/SDMD_W')
